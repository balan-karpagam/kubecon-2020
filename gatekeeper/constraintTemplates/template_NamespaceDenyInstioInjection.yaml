apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: namespacedenyinstioinjection
spec:
  crd:
    spec:
      names:
        kind: NamespaceDenyInstioInjection
  targets:
  - libs:
    - |-
      package lib.core

      default is_gatekeeper = false

      is_gatekeeper {
          has_field(input, "review")
          has_field(input.review, "object")
      }

      resource = input.review.object {
          is_gatekeeper
      }

      resource = input {
          not is_gatekeeper
      }

      format(msg) = {"msg": msg} {
          true
      }

      format_with_id(msg, id) = msg_fmt {
          msg_fmt := {
              "msg": sprintf("%s: %s", [id, msg]),
              "details": {"policyID": id}
          }
      }

      apiVersion = resource.apiVersion
      name = resource.metadata.name
      kind = resource.kind
      labels = resource.metadata.labels
      annotations = resource.metadata.annotations

      has_field(obj, field) {
          not object.get(obj, field, "N_DEFINED") == "N_DEFINED"
      }

      missing_field(obj, field) = true {
          obj[field] == ""
      }

      missing_field(obj, field) = true {
          not has_field(obj, field)
      }
    rego: |-
      package main

      import data.lib.core

      policyID := "P1005"

      violation[msg] {
        core.kind = "Namespace"
        not core.labels["istio-injection"]
        msg = core.format_with_id(sprintf("Namespace  %s does not have istio injection label", [core.name]), policyID)
      }


      violation[msg] {
          core.kind = "Namespace"
          not core.labels["istio-injection"] = "enabled"
          msg = core.format_with_id(sprintf("Namespace  %s does not have istio enabled", [core.name]), policyID)
      }
    target: admission.k8s.gatekeeper.sh
status: {}
